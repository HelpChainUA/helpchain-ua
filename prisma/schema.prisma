generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int       @id @default(autoincrement())
  name               String?
  email              String    @unique
  emailVerified      DateTime?
  password           String?
  city               String?
  onboardingStep     Int       @default(1)
  image              String?
  createdAt          DateTime  @default(now())
  resetPasswordToken String?  @unique
  resetPasswordTokenExpiry DateTime?

  // Profile fields
  firstName          String?
  lastName           String?
  age                Int?
  gender             String?
  currentRole        String?
  desiredRole        String?
  skills             Json?
  willingToRetrain   Boolean?  @default(false)
  willingToRelocate  Boolean?  @default(false)

  languageSkills     Json?
  preferredLanguage  Json?
  salary             String?

  accounts           Account[]
  sessions           Session[]
  cvs                Cv[]  
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?    @db.Text
  access_token       String?    @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?    @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Cv {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  fileUrl   String   // link to file (can be local or S3)
  createdAt DateTime @default(now())
}

